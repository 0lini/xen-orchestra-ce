name: Matrix multi-arch

on:
  # once a week build a new image
  #schedule:
  #  - cron: "30 2 * * 1"
  # or manually
  workflow_dispatch:


jobs:
  # Prebuild: get variables from XOA official repos
  pre-build:
    runs-on: ubuntu-latest

    outputs:
      xoserver: ${{ steps.xoa-version.outputs.xoaserver }}
      xoweb: ${{ steps.xoa-version.outputs.xoaweb }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - 
        name: Add python
        uses: actions/setup-python@v2
      - 
        name: Checkout scripts
        uses: actions/checkout@v2
      -
        name: Get XOA server version
        id: xoa-version
        run: python scripts/xoa_versions.py
      -
        name: Set global version
        id: version
        env:
          XOASERVER: ${{ steps.xoa-version.outputs.xoaserver }}
        run: |
          VERSION=$(echo ${XOASERVER} | sed -rn 's/([[:digit:]]+\.[[:digit:]]+)\..*/\1/p')
          echo "::set-output name=version::${VERSION}"

  # build XO in a docker
  arch-build:
    needs: pre-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: alpine
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ezka77/xen-orchestra-ce:latest
            ezka77/xen-orchestra-ce:${{ needs.pre-build.outputs.version }}-${{ matrix.arch }}
          build-args: |
            VERSION=${{ needs.pre-build.outputs.version }}
            XOSERVER=${{ needs.pre-build.outputs.xoserver }}
            XOWEB=${{ needs.pre-build.outputs.xoweb }}
    
  docker-manifest:
    needs: arch-build
    runs-on: ubuntu-latest
    # find a way to use the needs.arch-build.matrix.arch to build the cmd line
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker create latest manifest multi-arch
        run: |
           docker manifest create ezka77/xen-orchestra-ce:latest \
            --amend ezka77/xen-orchestra-ce:${{ jobs.pre-build.outputs.version }}-amd64 \
            --amend ezka77/xen-orchestra-ce:${{ jobs.pre-build.outputs.version }}-arm64
           docker manifest push create ezka77/xen-orchestra-ce:latest

      - name: Docker create ${{ jobs.pre-build.outputs.version }} manifest multi-arch
        run: |
           docker manifest create ezka77/xen-orchestra-ce:${{ jobs.pre-build.outputs.version }} \
            --amend ezka77/xen-orchestra-ce:${{ jobs.pre-build.outputs.version }}-amd64 \
            --amend ezka77/xen-orchestra-ce:${{ jobs.pre-build.outputs.version }}-arm64
           docker manifest push create ezka77/xen-orchestra-ce:${{ jobs.pre-build.outputs.version }}
